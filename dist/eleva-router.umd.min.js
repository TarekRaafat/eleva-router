/*! ElevaRouter v1.1.0-alpha | MIT License | https://github.com/TarekRaafat/eleva-router#readme */
var t,e;t=this,e=function(){"use strict";class t{constructor(t,e={}){if(this.eleva=t,this.container=e.container,!this.container)throw new Error("Router requires a container DOM element in options.");if(this.routes=e.routes||[],this.mode=e.mode||"hash",this.queryParam=e.queryParam||"page",this.defaultRoute=e.defaultRoute||null,this.eventListeners=[],this.isStarted=!1,!["hash","query","history"].includes(this.mode))throw new Error(`Invalid routing mode: ${this.mode}. Must be "hash", "query", or "history".`);this.routes=this.routes.map((t=>({...t,segments:this.parsePathIntoSegments(t.path)})))}parsePathIntoSegments(t){if(!t||"string"!=typeof t)throw new Error("Route path must be a non-empty string");return t.split("/").filter(Boolean).map((t=>t.startsWith(":")?{type:"param",name:t.substring(1)}:{type:"static",value:t}))}async start(){if(!this.isStarted)try{if("hash"===this.mode){const t=async()=>await this.routeChanged();window.addEventListener("hashchange",t),this.eventListeners.push((()=>window.removeEventListener("hashchange",t)))}else if("query"===this.mode||"history"===this.mode){const t=async()=>await this.routeChanged();window.addEventListener("popstate",t),this.eventListeners.push((()=>window.removeEventListener("popstate",t)))}this.isStarted=!0,await this.routeChanged()}catch(t){throw t}}async destroy(){if(this.isStarted)try{this.eventListeners.forEach((t=>t())),this.eventListeners=[];const t=this.container._eleva_instance;t&&await t.unmount(),this.isStarted=!1}catch(t){throw t}}async routeChanged(){try{let t,e,o;if("hash"===this.mode){o=window.location.href;let n=window.location.hash.slice(1)||"";[t,e]=n.split("?"),t=t||"/"}else if("query"===this.mode){o=window.location.href;const n=window.location.search,s=new URLSearchParams(n);t=s.get(this.queryParam)||"",s.delete(this.queryParam),e=s.toString(),t=t||"/"}else"history"===this.mode&&(o=window.location.href,t=window.location.pathname||"/",e=window.location.search?window.location.search.slice(1):"");"/"!==t.charAt(0)&&(t="/"+t);const n=this.container._eleva_instance;if(n)try{await n.unmount()}catch(t){}const s=this.parseQuery(e),a=this.matchRoute(t);if(!a&&this.defaultRoute)try{const e=this.wrapComponentWithRoute(this.defaultRoute.component,{path:t,query:s,fullUrl:o,params:{},matchedRoute:this.defaultRoute.path}),n=this.defaultRoute.props||{};await this.eleva.mount(this.container,e,n)}catch(t){}else if(a)try{const{route:e,params:n}=a,i=this.wrapComponentWithRoute(e.component,{path:t,query:s,fullUrl:o,params:n,matchedRoute:e.path}),r=e.props||{};await this.eleva.mount(this.container,i,r)}catch(t){}}catch(t){}}parseQuery(t){const e={};if(!t)return e;try{t.split("&").forEach((t=>{const[o,n]=t.split("=");o&&(e[decodeURIComponent(o)]=n?decodeURIComponent(n):"")}))}catch(t){}return e}matchRoute(t){if(!t||"string"!=typeof t)return null;try{if("/"===t){const t=this.routes.find((t=>"/"===t.path));return t?{route:t,params:{}}:null}const e=t.split("/").filter(Boolean);for(const t of this.routes)try{if("/"===t.path)continue;const o=t.segments;if(!o.some((t=>"param"===t.type&&t.name.endsWith("*")))&&o.length!==e.length)continue;const n={};let s=!0;for(let t=0;t<o.length;t++){const a=o[t],i=e[t];if(void 0===i){s=!1;break}if("static"===a.type){if(a.value!==i){s=!1;break}}else if("param"===a.type){if(a.name.endsWith("*")){n[a.name.slice(0,-1)]=e.slice(t).join("/");break}n[a.name]=i}}if(s)return{route:t,params:n}}catch(t){continue}return null}catch(t){return null}}async navigate(t,e={}){if(t&&"string"==typeof t)try{if(e&&Object.keys(e).length>0&&Object.keys(e).forEach((o=>{t=t.replace(`:${o}`,encodeURIComponent(e[o]))})),"hash"===this.mode)window.location.hash="/"===t||""===t?"":t;else if("query"===this.mode){const e=new URLSearchParams(window.location.search);"/"===t||""===t?e.delete(this.queryParam):e.set(this.queryParam,t);const o=e.toString(),n=window.location.pathname+(o?"?"+o:"");history.pushState({},"",n),await this.routeChanged()}else"history"===this.mode&&(history.pushState({},"",t),await this.routeChanged())}catch(t){}}addRoute(t){if(!t||!t.path||!t.component)throw new Error("Route must have both 'path' and 'component' properties");try{t.segments=this.parsePathIntoSegments(t.path),this.routes.push(t)}catch(t){throw t}}wrapComponentWithRoute(t,e){let o;if("string"==typeof t){if(o=this.eleva._components.get(t),!o)throw new Error(`Component "${t}" not registered.`)}else o=t;const n={...o},s=n.setup;if(n.setup=t=>{t.route=e;const o=this.navigate.bind(this);return t.navigate=(t,e)=>o(t,e),s?s(t):{}},n.children){const t={...n.children};n.children={},Object.keys(t).forEach((o=>{n.children[o]=this.wrapComponentWithRoute(t[o],e)}))}return n}}return{name:"ElevaRouter",install(e,o={}){try{let n=0;(o.routes||[]).forEach((t=>{if("object"==typeof t.component){let o=t.component.name;o||(o="AutoRegComponent_"+n++),e.component(o,t.component),t.component=o}}));const s=new t(e,o);e.router=s,!1!==o.autoStart&&queueMicrotask((async()=>{try{await s.start()}catch(t){}}))}catch(t){throw t}}}},"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).ElevaRouter=e();
//# sourceMappingURL=eleva-router.umd.min.js.map
