{"version":3,"file":"eleva-router.esm.js","sources":["../src/index.js"],"sourcesContent":["/**\n * @class Router\n * @classdesc A Router Plugin for Eleva.js with Multiple Routing Modes\n *\n * This plugin provides client-side routing functionality for Eleva.js applications.\n * It supports hash-based (e.g. \"#pageName\"), query-based (e.g. \"?page=pageName\"),\n * and history-based (e.g. \"/pageName\") routing. The routing mode is configurable via\n * the plugin options.\n *\n * In addition to injecting route information (current path, query parameters,\n * and full URL) directly into the component's setup context as `route`, this plugin\n * also injects a `navigate` function so developers can programmatically navigate from within components.\n *\n * @param {Object} eleva - The Eleva instance.\n * @param {Object} options - Router configuration options.\n * @param {HTMLElement} options.container - The DOM element where routed components will be mounted.\n * @param {string} [options.mode=\"hash\"] - The routing mode (\"hash\", \"query\", or \"history\").\n * @param {Array<Object>} options.routes - An array of route objects. Each route object should have:\n *   - {string} path - The URL path (e.g. \"/\" or \"/about\").\n *   - {string|Object} component - The component name (if registered globally) or a component definition.\n *   - {Object} [props] - Additional props to pass to the component.\n * @param {Object} [options.defaultRoute] - A default route object used when no route matches.\n */\nclass Router {\n  constructor(eleva, options = {}) {\n    this.eleva = eleva;\n    this.container = options.container;\n    if (!this.container) {\n      throw new Error(\"Router requires a container DOM element in options.\");\n    }\n    this.routes = options.routes || [];\n    this.mode = options.mode || \"hash\"; // \"hash\", \"query\", or \"history\"\n    this.defaultRoute = options.defaultRoute || null;\n  }\n\n  /**\n   * Starts the router by setting up event listeners and resolving the initial route.\n   * @returns {void}\n   */\n  start() {\n    if (this.mode === \"hash\") {\n      window.addEventListener(\"hashchange\", () => this.routeChanged());\n    } else if (this.mode === \"query\" || this.mode === \"history\") {\n      window.addEventListener(\"popstate\", () => this.routeChanged());\n    } else {\n      throw new Error(`Invalid routing mode: ${this.mode}`);\n    }\n    // Resolve the initial route.\n    this.routeChanged();\n  }\n\n  /**\n   * Called when the route changes. Extracts the current route based on the routing mode,\n   * parses the URL query, and mounts the corresponding component. Injects route data and\n   * a navigation function directly into the component's setup context.\n   * @returns {void}\n   */\n  routeChanged() {\n    let path, queryString, fullUrl;\n    if (this.mode === \"hash\") {\n      fullUrl = window.location.href;\n      let hash = window.location.hash.slice(1) || \"\";\n      [path, queryString] = hash.split(\"?\");\n      // If path is empty, default to \"/\"\n      path = path || \"/\";\n    } else if (this.mode === \"query\") {\n      fullUrl = window.location.href;\n      const search = window.location.search; // e.g. ?page=about&foo=bar\n      const urlParams = new URLSearchParams(search);\n      path = urlParams.get(\"page\") || \"\";\n      urlParams.delete(\"page\");\n      queryString = urlParams.toString();\n      path = path || \"/\";\n    } else if (this.mode === \"history\") {\n      fullUrl = window.location.href;\n      path = window.location.pathname || \"/\";\n      queryString = window.location.search\n        ? window.location.search.slice(1)\n        : \"\";\n    } else {\n      throw new Error(\"Invalid router mode: \" + this.mode);\n    }\n    // Normalize the path: Ensure it starts with '/'\n    if (path.charAt(0) !== \"/\") {\n      path = \"/\" + path;\n    }\n    const query = this.parseQuery(queryString);\n    // Try to find a matching route for the current path.\n    let route = this.matchRoute(path);\n    // Use defaultRoute if no matching route is found.\n    if (!route && this.defaultRoute) {\n      route = this.defaultRoute;\n    }\n    if (route) {\n      const wrappedComponent = this.wrapComponentWithRoute(route.component, {\n        path,\n        query,\n        fullUrl,\n      });\n      const props = route.props || {};\n      // For all modes, clear the container before mounting the new route.\n      this.container.innerHTML = \"\";\n      this.eleva.mount(this.container, wrappedComponent, props);\n    }\n  }\n\n  /**\n   * Parses a query string into an object.\n   * @param {string} queryString - The query string portion of a URL.\n   * @returns {Object} An object containing key-value pairs for query parameters.\n   */\n  parseQuery(queryString) {\n    const query = {};\n    if (!queryString) return query;\n    queryString.split(\"&\").forEach((pair) => {\n      const [key, value] = pair.split(\"=\");\n      if (key) {\n        query[decodeURIComponent(key)] = value ? decodeURIComponent(value) : \"\";\n      }\n    });\n    return query;\n  }\n\n  /**\n   * Finds a matching route for the specified path.\n   * @param {string} path - The current path extracted from the URL.\n   * @returns {Object|undefined} The matching route object, or undefined if no match is found.\n   */\n  matchRoute(path) {\n    return this.routes.find((route) => route.path === path);\n  }\n\n  /**\n   * Programmatically navigates to the specified route.\n   * Updates the URL based on the routing mode and triggers route resolution.\n   * @param {string} path - The target route path.\n   * @returns {void}\n   */\n  navigate(path) {\n    if (this.mode === \"hash\") {\n      // In hash mode, if navigating to home (\"/\"), remove the hash entirely.\n      if (path === \"/\" || path === \"\") {\n        // Remove the hash entirely using replaceState and update the view.\n        history.replaceState(\n          null,\n          \"\",\n          window.location.pathname + window.location.search\n        );\n        this.routeChanged();\n      } else {\n        window.location.hash = path;\n      }\n    } else if (this.mode === \"query\") {\n      const urlParams = new URLSearchParams(window.location.search);\n      if (path === \"/\" || path === \"\") {\n        urlParams.delete(\"page\");\n      } else {\n        urlParams.set(\"page\", path);\n      }\n      const newQuery = urlParams.toString();\n      const newUrl =\n        window.location.pathname + (newQuery ? \"?\" + newQuery : \"\");\n      history.pushState({}, \"\", newUrl);\n      this.routeChanged();\n    } else if (this.mode === \"history\") {\n      history.pushState({}, \"\", path);\n      this.routeChanged();\n    }\n  }\n\n  /**\n   * Adds a new route to the router.\n   * @param {Object} route - The route object to add.\n   * @returns {void}\n   */\n  addRoute(route) {\n    this.routes.push(route);\n  }\n\n  /**\n   * Wraps a component definition so that its setup function receives the route information\n   * and the navigate function directly in the context.\n   * @param {string|Object} comp - The component name (if registered globally) or component definition.\n   * @param {Object} routeInfo - An object containing route information (path, query, fullUrl).\n   * @returns {Object} A new component definition with an augmented setup function.\n   */\n  wrapComponentWithRoute(comp, routeInfo) {\n    let definition = comp;\n    if (typeof comp === \"string\") {\n      definition = this.eleva._components[comp];\n      if (!definition) {\n        throw new Error(`Component \"${comp}\" not registered.`);\n      }\n    }\n    // Create a shallow copy of the component definition.\n    const wrapped = { ...definition };\n    const originalSetup = wrapped.setup;\n\n    // Override the setup function to inject route information\n    wrapped.setup = (ctx) => {\n      ctx.route = routeInfo;\n      ctx.navigate = this.navigate.bind(this);\n      // Inject route information and navigation function into the context.\n      return originalSetup ? originalSetup(ctx) : {};\n    };\n\n    // If this component has children, we need to modify its children handling\n    if (wrapped.children) {\n      const originalChildren = { ...wrapped.children };\n      wrapped.children = {};\n\n      // For each child component, wrap it to also include route information\n      Object.keys(originalChildren).forEach((childKey) => {\n        const childComp = originalChildren[childKey];\n        wrapped.children[childKey] = this.wrapComponentWithRoute(\n          childComp,\n          routeInfo\n        );\n      });\n    }\n\n    return wrapped;\n  }\n}\n\n/**\n * @typedef {Object} RouteDefinition\n * @property {string} path - The URL path (e.g., \"/\" or \"/about\").\n * @property {string|Object} component - The component name (if registered globally) or a component definition.\n * @property {Object} [props] - Additional properties to pass to the routed component.\n */\n\n/**\n * @typedef {Object} RouterOptions\n * @property {HTMLElement} container - The DOM element where routed components will be mounted.\n * @property {string} [mode=\"hash\"] - The routing mode: \"hash\", \"query\", or \"history\".\n * @property {Array<RouteDefinition>} routes - An array of route definitions.\n * @property {RouteDefinition} [defaultRoute] - A default route object to use when no route matches.\n */\n\n/**\n * @namespace ElevaRouter\n * @description ElevaRouter is the official router plugin for Eleva.js.\n *\n * It provides client-side routing\n * functionality with support for multiple routing modes, automatic component registration, and route\n * information injection into the setup context.\n *\n * Installs the ElevaRouter plugin into an Eleva.js instance.\n * Automatically registers routed components if provided as definitions.\n *\n * @param {Object} eleva - The Eleva instance.\n * @param {RouterOptions} options - Router configuration options.\n * @returns {void}\n */\nconst ElevaRouter = {\n  install(eleva, options = {}) {\n    // Automatically register routed components if provided as definitions.\n    const routes = options.routes || [];\n    let autoRegCounter = 0;\n    routes.forEach((route) => {\n      if (typeof route.component === \"object\") {\n        let compName = route.component.name;\n        if (!compName) {\n          compName = \"AutoRegComponent_\" + autoRegCounter++;\n        }\n        eleva.component(compName, route.component);\n        route.component = compName;\n      }\n    });\n    const router = new Router(eleva, options);\n    eleva.router = router;\n    router.start();\n  },\n};\n\nexport default ElevaRouter;\n"],"names":["Router","constructor","eleva","options","container","Error","routes","mode","defaultRoute","start","window","addEventListener","routeChanged","path","queryString","fullUrl","location","href","hash","slice","split","search","urlParams","URLSearchParams","get","delete","toString","pathname","charAt","query","parseQuery","route","matchRoute","wrappedComponent","wrapComponentWithRoute","component","props","innerHTML","mount","forEach","pair","key","value","decodeURIComponent","find","navigate","history","replaceState","set","newQuery","newUrl","pushState","addRoute","push","comp","routeInfo","definition","_components","wrapped","originalSetup","setup","ctx","bind","children","originalChildren","Object","keys","childKey","childComp","ElevaRouter","install","autoRegCounter","compName","name","router"],"mappings":"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"}