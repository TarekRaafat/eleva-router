{"version":3,"file":"eleva-router.esm.js","sources":["../src/index.js"],"sourcesContent":["/**\n * @class Router\n * @classdesc A router for Eleva.js that supports multiple routing modes:\n * \"hash\", \"query\", and \"history\". It extracts the current route information\n * (path, query parameters, full URL) and injects it into routed components'\n * setup context along with a `navigate` function.\n *\n * @param {Object} eleva - The Eleva instance.\n * @param {Object} options - Router configuration options.\n * @param {HTMLElement} options.container - The DOM element where routed components will be mounted.\n * @param {string} [options.mode=\"hash\"] - The routing mode (\"hash\", \"query\", or \"history\").\n * @param {Array<Object>} options.routes - An array of route objects. Each route object should have:\n *   - {string} path - The URL path (e.g. \"/\" or \"/about\").\n *   - {string|Object} component - The component name (if registered globally) or a component definition.\n *   - {Object} [props] - Additional props to pass to the component.\n * @param {Object} [options.defaultRoute] - A default route object used when no route matches.\n */\nclass Router {\n  constructor(eleva, options = {}) {\n    this.eleva = eleva;\n    this.container = options.container;\n    if (!this.container) {\n      throw new Error(\"Router requires a container DOM element in options.\");\n    }\n    this.routes = options.routes || [];\n    this.mode = options.mode || \"hash\"; // \"hash\", \"query\", or \"history\"\n    this.defaultRoute = options.defaultRoute || null;\n  }\n\n  /**\n   * Starts the router by setting up event listeners and resolving the initial route.\n   * @returns {void}\n   */\n  start() {\n    if (this.mode === \"hash\") {\n      window.addEventListener(\"hashchange\", () => this.routeChanged());\n    } else if (this.mode === \"query\" || this.mode === \"history\") {\n      window.addEventListener(\"popstate\", () => this.routeChanged());\n    } else {\n      throw new Error(`Invalid routing mode: ${this.mode}`);\n    }\n    // Resolve the initial route.\n    this.routeChanged();\n  }\n\n  /**\n   * Called when the route changes. Extracts the current route based on the routing mode,\n   * parses the URL query, and mounts the corresponding component. Injects route data and\n   * a navigation function directly into the component's setup context.\n   * @returns {void}\n   */\n  routeChanged() {\n    let path, queryString, fullUrl;\n    if (this.mode === \"hash\") {\n      fullUrl = window.location.href;\n      let hash = window.location.hash.slice(1) || \"/\";\n      [path, queryString] = hash.split(\"?\");\n      path = path || \"/\";\n    } else if (this.mode === \"query\") {\n      fullUrl = window.location.href;\n      const search = window.location.search; // e.g. ?page=about&foo=bar\n      const urlParams = new URLSearchParams(search);\n      path = urlParams.get(\"page\") || \"/\";\n      urlParams.delete(\"page\");\n      queryString = urlParams.toString();\n    } else if (this.mode === \"history\") {\n      fullUrl = window.location.href;\n      path = window.location.pathname || \"/\";\n      queryString = window.location.search\n        ? window.location.search.slice(1)\n        : \"\";\n    } else {\n      throw new Error(\"Invalid router mode: \" + this.mode);\n    }\n    const query = this.parseQuery(queryString);\n    // Try to find a matching route for the current path.\n    let route = this.matchRoute(path);\n    // Use defaultRoute if no matching route is found.\n    if (!route && this.defaultRoute) {\n      route = this.defaultRoute;\n    }\n    if (route) {\n      const wrappedComponent = this.wrapComponentWithRoute(route.component, {\n        path,\n        query,\n        fullUrl,\n      });\n      const props = route.props || {};\n      this.eleva.mount(this.container, wrappedComponent, props);\n    }\n  }\n\n  /**\n   * Parses a query string into an object.\n   * @param {string} queryString - The query string portion of a URL.\n   * @returns {Object} An object containing key-value pairs for query parameters.\n   */\n  parseQuery(queryString) {\n    const query = {};\n    if (!queryString) return query;\n    queryString.split(\"&\").forEach((pair) => {\n      const [key, value] = pair.split(\"=\");\n      if (key) {\n        query[decodeURIComponent(key)] = value ? decodeURIComponent(value) : \"\";\n      }\n    });\n    return query;\n  }\n\n  /**\n   * Finds a matching route for the specified path.\n   * @param {string} path - The current path extracted from the URL.\n   * @returns {Object|undefined} The matching route object, or undefined if no match is found.\n   */\n  matchRoute(path) {\n    return this.routes.find((route) => route.path === path);\n  }\n\n  /**\n   * Programmatically navigates to the specified route.\n   * Updates the URL based on the routing mode and triggers route resolution.\n   * @param {string} path - The target route path.\n   * @returns {void}\n   */\n  navigate(path) {\n    if (this.mode === \"hash\") {\n      window.location.hash = path;\n    } else if (this.mode === \"query\") {\n      const urlParams = new URLSearchParams(window.location.search);\n      urlParams.set(\"page\", path);\n      const newUrl = window.location.pathname + \"?\" + urlParams.toString();\n      history.pushState({}, \"\", newUrl);\n      this.routeChanged();\n    } else if (this.mode === \"history\") {\n      history.pushState({}, \"\", path);\n      this.routeChanged();\n    }\n  }\n\n  /**\n   * Adds a new route to the router.\n   * @param {Object} route - The route object to add.\n   * @returns {void}\n   */\n  addRoute(route) {\n    this.routes.push(route);\n  }\n\n  /**\n   * Wraps a component definition so that its setup function receives the route information\n   * and the navigate function directly in the context.\n   * @param {string|Object} comp - The component name (if registered globally) or component definition.\n   * @param {Object} routeInfo - An object containing route information (path, query, fullUrl).\n   * @returns {Object} A new component definition with an augmented setup function.\n   */\n  wrapComponentWithRoute(comp, routeInfo) {\n    let definition = comp;\n    if (typeof comp === \"string\") {\n      definition = this.eleva._components[comp];\n      if (!definition) {\n        throw new Error(`Component \"${comp}\" not registered.`);\n      }\n    }\n    // Create a shallow copy of the component definition.\n    const wrapped = { ...definition };\n    const originalSetup = wrapped.setup;\n    wrapped.setup = (ctx) => {\n      const data = originalSetup ? originalSetup(ctx) : {};\n      // Inject route information and navigation function into the context.\n      return Object.assign({}, data, {\n        route: routeInfo,\n        navigate: this.navigate.bind(this),\n      });\n    };\n    return wrapped;\n  }\n}\n\n/**\n * @typedef {Object} RouteDefinition\n * @property {string} path - The URL path (e.g., \"/\" or \"/about\").\n * @property {string|Object} component - The component name (if registered globally) or component definition.\n * @property {Object} [props] - Additional properties to pass to the routed component.\n */\n\n/**\n * @typedef {Object} RouterOptions\n * @property {HTMLElement} container - The DOM element where routed components will be mounted.\n * @property {string} [mode=\"hash\"] - The routing mode: \"hash\", \"query\", or \"history\".\n * @property {Array<RouteDefinition>} routes - An array of route definitions.\n * @property {RouteDefinition} [defaultRoute] - A default route object to use when no route matches.\n */\n\n/**\n * @namespace ElevaRouter\n * @description ElevaRouter is the official router plugin for Eleva.js. It provides client-side routing\n * functionality with support for multiple routing modes, automatic component registration, and route\n * information injection into the setup context.\n */\nconst ElevaRouter = {\n  /**\n   * Installs the ElevaRouter plugin into an Eleva.js instance.\n   * Automatically registers routed components if provided as definitions.\n   *\n   * @param {Object} eleva - The Eleva instance.\n   * @param {RouterOptions} options - Router configuration options.\n   * @returns {void}\n   *\n   * @example\n   * import Eleva from \"eleva\";\n   * import ElevaRouter from \"@eleva/router\";\n   *\n   * const app = new Eleva(\"MyApp\");\n   *\n   * const HomeComponent = {\n   *   setup: ({ route }) => {\n   *     console.log(\"Current route:\", route.path);\n   *     return {};\n   *   },\n   *   template: () => `<div>Welcome Home!</div>`\n   * };\n   *\n   * const AboutComponent = {\n   *   setup: ({ route, navigate }) => {\n   *     function goHome() { navigate(\"/\"); }\n   *     return { goHome };\n   *   },\n   *   template: (ctx) => `\n   *     <div>\n   *       <h1>About Us</h1>\n   *       <button @click=\"goHome\">Go Home</button>\n   *     </div>\n   *   `\n   * };\n   *\n   * const NotFoundComponent = {\n   *   setup: ({ route, navigate }) => ({ goHome: () => navigate(\"/\") }),\n   *   template: (ctx) => `\n   *     <div>\n   *       <h1>404 - Not Found</h1>\n   *       <button @click=\"goHome\">Return Home</button>\n   *     </div>\n   *   `\n   * };\n   *\n   * app.use(ElevaRouter, {\n   *   container: document.getElementById(\"view\"),\n   *   mode: \"history\", // \"hash\", \"query\", or \"history\"\n   *   routes: [\n   *     { path: \"/\", component: HomeComponent },\n   *     { path: \"/about\", component: AboutComponent }\n   *   ],\n   *   defaultRoute: { path: \"/404\", component: NotFoundComponent }\n   * });\n   *\n   * // Navigate programmatically:\n   * app.router.navigate(\"/about\");\n   */\n  install(eleva, options = {}) {\n    // Automatically register routed components if provided as definitions.\n    const routes = options.routes || [];\n    let autoRegCounter = 0;\n    routes.forEach((route) => {\n      if (typeof route.component === \"object\") {\n        let compName = route.component.name;\n        if (!compName) {\n          compName = \"AutoRegComponent_\" + autoRegCounter++;\n        }\n        eleva.component(compName, route.component);\n        route.component = compName;\n      }\n    });\n    const router = new Router(eleva, options);\n    eleva.router = router;\n    router.start();\n  },\n};\n\nexport default ElevaRouter;\n"],"names":["Router","constructor","eleva","options","container","Error","routes","mode","defaultRoute","start","window","addEventListener","routeChanged","path","queryString","fullUrl","location","href","hash","slice","split","search","urlParams","URLSearchParams","get","delete","toString","pathname","query","parseQuery","route","matchRoute","wrappedComponent","wrapComponentWithRoute","component","props","mount","forEach","pair","key","value","decodeURIComponent","find","navigate","set","newUrl","history","pushState","addRoute","push","comp","routeInfo","definition","_components","wrapped","originalSetup","setup","ctx","data","Object","assign","bind","ElevaRouter","install","autoRegCounter","compName","name","router"],"mappings":"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"}